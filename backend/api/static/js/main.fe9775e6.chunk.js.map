{"version":3,"sources":["components/homepage/index.js","config.js","components/marksinput/index.js","components/leaderboard/icons.js","components/leaderboard/sort.js","components/leaderboard/index.js","App.js","reportWebVitals.js","index.js"],"names":["Homepage","id","to","API_URL","total","percent","MarksInput","state","roll","name","math","phys","chem","handleChange","e","setState","target","value","Number","handleSubmit","preventDefault","fetch","method","body","JSON","stringify","then","res","json","data","alert","error","document","querySelectorAll","forEach","el","catch","err","String","this","className","toFixed","onSubmit","type","onChange","placeholder","min","max","required","maxLength","Component","SortDSC","fill","stroke","viewBox","xmlns","strokeLinecap","strokeLinejoin","strokeWidth","d","SortASC","SearchIcon","sortByPercentage","prcnt_icon","marks","sort","a","b","percentage","changeIcon","index","loading","roll_icon","name_icon","math_icon","phys_icon","chem_icon","total_icon","icon","resetIcon","search","length","toUpperCase","filter","c","roll_no","includes","onFocus","initSearch","onClick","A","B","maths","physics","chemistry","map","x","App","exact","path","component","LeaderBoard","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fe9775e6.chunk.js","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './style.css'\n\nexport default function Homepage() {\n    return (\n        <div id=\"homepage\">\n            <header>Welcome</header>\n\n            <section>\n                <Link to=\"/marksinput\">\n                    <button>ENTER MARKS</button>\n                </Link>\n\n                <Link to=\"/leaderboard\">\n                    <button>LEADERBOARD</button>\n                </Link>\n            </section>\n        </div>\n    )\n}\n","export const API_URL = 'http://assignment-almabetter.ap-south-1.elasticbeanstalk.com'\n","import React, { Component } from 'react'\nimport './style.css'\nimport { API_URL } from '../../config'\nimport { Link } from 'react-router-dom'\n\nlet total = 0\nlet percent = 0\n\nclass MarksInput extends Component {\n\n    state = {\n        roll: null,\n        name: '',\n        math: 0,\n        phys: 0,\n        chem: 0\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.name === 'name' ? e.target.value : Number(e.target.value),\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n\n        // send the data\n        fetch(`${API_URL}/add`, {\n            method: 'POST',\n            body: JSON.stringify({\n                'roll': this.state.roll,\n                'name': this.state.name,\n                'math': this.state.math,\n                'phys': this.state.phys,\n                'chem': this.state.chem,\n                'total': total,\n                'percent': percent\n            })\n        }\n        ).then(res => res.json()\n        ).then(data => {\n            if ('error' in data) {\n                alert(data.error)\n            }\n            else {\n                this.setState({\n                    roll: null,\n                    name: '',\n                    math: 0,\n                    phys: 0,\n                    chem: 0,\n                    error: null\n                })\n\n                // clear all input fields\n                document.querySelectorAll('input').forEach(el => el.value = '')\n                alert('Added Successfully!')\n            }\n        }).catch(err => {\n            alert(String(err))\n        })\n    }\n\n    render() {\n        total = this.state.math + this.state.phys + this.state.chem\n        percent = total / 3\n\n        return (\n            <div id=\"marksinput\">\n\n                <header>ENTER MARKS</header>\n\n                <section>\n\n                    <div id=\"show\">\n                        <div className=\"small\">\n                            <div className=\"big\">{total.toFixed(1)}</div>\n                            Total Marks\n                        </div>\n\n                        <div className=\"small\">\n                            <div className=\"big\">{percent.toFixed(2)}%</div>\n                            Percentage\n                        </div>\n                    </div>\n\n                    <form onSubmit={this.handleSubmit}>\n                        {/* Roll No [upto 10 digits long] */ }\n                        <input type=\"number\" name=\"roll\" onChange={this.handleChange} placeholder=\"Roll No\" min=\"0\" max=\"9999999999\" required/>\n\n                        {/* Name [upto 30 chars] */}\n                        <input type=\"text\" name=\"name\" onChange={this.handleChange} maxLength=\"30\" placeholder=\"Name\" required/>\n\n                        {/* Marks in Maths */}\n                        <input type=\"number\" name=\"math\" onChange={this.handleChange} min=\"0\" max=\"100\" placeholder=\"Marks in Maths\" required/>\n\n                        {/* Marks in Physics */}\n                        <input type=\"number\" name=\"phys\" onChange={this.handleChange} min=\"0\" max=\"100\" placeholder=\"Marks in Physics\" required/>\n\n                        {/* Marks in Chemistry */}\n                        <input type=\"number\" name=\"chem\" onChange={this.handleChange} min=\"0\" max=\"100\" placeholder=\"Marks in Chemistry\" required/>\n\n                        <button type=\"submit\">Submit</button>\n                    </form>\n\n                </section>\n                \n                <Link to=\"/\" id='backbutton'>\n                    Back to Homepage\n                </Link>\n            </div>\n        )\n    }\n}\n\nexport default MarksInput","export const SortDSC = <svg className=\"sort-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 4h13M3 8h9m-9 4h9m5-4v12m0 0l-4-4m4 4l4-4\" /></svg>\nexport const SortASC = <svg className=\"sort-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 4h13M3 8h9m-9 4h6m4 0l4-4m0 0l4 4m-4-4v12\" /></svg>\nexport const SearchIcon = <svg className=\"search-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" /></svg>","export const sortByRollNo = (state) => {\n    state.roll_icon === 'ASC' ? state.marks.sort(\n        // descending order\n        (a, b) => b.roll_no - a.roll_no\n    ) : state.marks.sort(\n        // ascending order\n        (a, b) => a.roll_no - b.roll_no\n    )\n\n    state.roll_icon === 'ASC'\n        ? state.changeIcon('roll_icon', 'DSC')\n        : state.changeIcon('roll_icon', 'ASC')\n}\n\n\nexport const sortByName = (state) => {\n    state.name_icon === 'ASC' ? state.marks.sort((a, b) => {\n        // descending order\n        let A = a.name.toUpperCase()\n        let B = b.name.toUpperCase()\n        if (B < A) { return -1 }\n        if (B > A) { return 1 }\n        return 0\n    }) : state.marks.sort((a, b) => {\n        // ascending order\n        let A = a.name.toUpperCase()\n        let B = b.name.toUpperCase()\n        if (A < B) { return -1 }\n        if (A > B) { return 1 }\n        return 0\n    })\n\n    state.name_icon === 'ASC'\n        ? state.changeIcon('name_icon', 'DSC')\n        : state.changeIcon('name_icon', 'ASC')\n}\n\nexport const sortByMaths = (state) => {\n    state.math_icon === 'DSC' ? state.marks.sort(\n        // ascending order\n        (a, b) => a.maths - b.maths\n    ) : state.marks.sort(\n        // descending order\n        (a, b) => b.maths - a.maths\n    )\n\n    state.math_icon === 'DSC'\n        ? state.changeIcon('math_icon', 'ASC')\n        : state.changeIcon('math_icon', 'DSC')\n}\n\nexport const sortByPhysics = (state) => {\n    state.phys_icon === 'DSC' ? state.marks.sort(\n        (a, b) => a.physics - b.physics\n    ) : state.marks.sort(\n        (a, b) => b.physics - a.physics\n    )\n\n    state.phys_icon === 'DSC'\n        ? state.changeIcon('phys_icon', 'ASC')\n        : state.changeIcon('phys_icon', 'DSC')\n}\n\nexport const sortByChemistry = (state) => {\n    state.chem_icon === 'DSC' ? state.marks.sort(\n        (a, b) => a.chemistry - b.chemistry\n    ) : state.marks.sort(\n        (a, b) => b.chemistry - a.chemistry\n    )\n\n    state.chem_icon === 'DSC'\n        ? state.changeIcon('chem_icon', 'ASC')\n        : state.changeIcon('chem_icon', 'DSC')\n}\n\nexport const sortByTotal = (state) => {\n    state.total_icon === 'DSC' ? state.marks.sort(\n        (a, b) => a.total - b.total\n    ) : state.marks.sort(\n        (a, b) => b.total - a.total\n    )\n\n    state.total_icon === 'DSC'\n        ? state.changeIcon('total_icon', 'ASC')\n        : state.changeIcon('total_icon', 'DSC')\n}\n\nexport const sortByPercentage = (state) => {\n    state.prcnt_icon === 'DSC' ? state.marks.sort(\n        (a, b) => a.percentage - b.percentage\n    ) : state.marks.sort(\n        (a, b) => b.percentage - a.percentage\n    )\n\n    state.prcnt_icon === 'DSC'\n        ? state.changeIcon('prcnt_icon', 'ASC')\n        : state.changeIcon('prcnt_icon', 'DSC')\n}","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport './style.css'\nimport { API_URL } from '../../config'\nimport { SortDSC, SortASC, SearchIcon } from './icons'\nimport {\n    sortByRollNo,\n    sortByName,\n    sortByMaths,\n    sortByPhysics,\n    sortByChemistry,\n    sortByTotal,\n    sortByPercentage\n} from './sort'\n\nexport default class index extends Component {\n\n    state = {\n        marks: [],\n        loading: true,\n        error: null,\n\n        // *_icon variables to keep record of lastest sorting and icon changes\n        roll_icon: null,\n        name_icon: null,\n        math_icon: null,\n        phys_icon: null,\n        chem_icon: null,\n        total_icon: null,\n        prcnt_icon: null,\n\n        // ables to change state outise this class\n        changeIcon: (icon, value) => {\n            this.resetIcon()\n            this.setState({\n                [icon]: value\n            })\n        },\n\n        // to implement search functionality\n        search: []\n    }\n\n    // prevents multiple icons rendering\n    resetIcon() {\n        this.setState({\n            roll_icon: null,\n            name_icon: null,\n            math_icon: null,\n            phys_icon: null,\n            chem_icon: null,\n            total_icon: null,\n            prcnt_icon: null\n        })\n    }\n\n    // so that fetch is called only once\n    componentDidMount() {\n        fetch(\n            `${API_URL}/get`\n        ).then(res => res.json()\n        ).then(data => {\n            this.setState({\n                marks: [...data.marks],\n                loading: false\n            })\n\n            // to sort by percentage by default\n            sortByPercentage(this.state)\n\n        }).catch(err => this.setState({\n            error: err\n        }))\n    }\n\n    search(e) {\n        if ((e.target.value).length > 0) {\n            // to remove case sensitivity\n            let value = e.target.value.toUpperCase()\n\n            let res = this.state.search.filter((a) => {\n                // to remove case sensitivity\n                let b = a.name.toUpperCase()\n\n                // so that includes() can be used\n                let c = String(a.roll_no)\n\n                // search name\n                if (b.includes(value)) {\n                    return true\n                }\n\n                // search roll no\n                if (c.includes(value)) {\n                    return true\n                }\n\n                return false\n            })\n\n            // put the results in state\n            this.setState({\n                marks: [...res]\n            })\n        }\n\n        // if search input is empty show all results\n        else {\n            this.setState({\n                marks: [...this.state.search]\n            })\n        }\n    }\n\n    // make a copy of marks\n    initSearch() {\n        this.setState({\n            search: [...this.state.marks]\n        })\n    }\n\n    render() {\n        return (\n            <div id=\"leaderboard\">\n                <header>LEADERBOARD</header>\n\n                <section>\n\n                    <div id=\"search\">\n                        <div id=\"icon-container\">{SearchIcon}</div>\n                        <input type=\"text\" placeholder=\"Seach Name or RollNo\" onChange={(e) => this.search(e)} onFocus={(e) => this.initSearch(e)} />\n                    </div>\n\n\n                    {\n                        this.state.loading\n                            ? (<div className=\"loading\">LOADING...</div>)\n                            : (\n                                <table>\n                                    <thead>\n                                        <tr id=\"headings\">\n                                            <th onClick={() => sortByRollNo(this.state)}>Roll No</th>\n                                            <th onClick={() => sortByName(this.state)}>Name</th>\n                                            <th onClick={() => sortByMaths(this.state)}>Maths</th>\n                                            <th onClick={() => sortByPhysics(this.state)}>Physics</th>\n                                            <th onClick={() => sortByChemistry(this.state)}>Chemistry</th>\n                                            <th onClick={() => sortByTotal(this.state)}>Total</th>\n                                            <th onClick={() => sortByPercentage(this.state)}>Percentage</th>\n                                        </tr>\n\n                                        {/* for displaying icons (describes the sorting order of column) */}\n                                        <tr id=\"icons\">\n                                            <th>{this.state.roll_icon && (this.state.roll_icon === 'ASC' ? SortASC : SortDSC)}</th>\n                                            <th>{this.state.name_icon && (this.state.name_icon === 'ASC' ? SortASC : SortDSC)}</th>\n                                            <th>{this.state.math_icon && (this.state.math_icon === 'ASC' ? SortASC : SortDSC)}</th>\n                                            <th>{this.state.phys_icon && (this.state.phys_icon === 'ASC' ? SortASC : SortDSC)}</th>\n                                            <th>{this.state.chem_icon && (this.state.chem_icon === 'ASC' ? SortASC : SortDSC)}</th>\n                                            <th>{this.state.total_icon && (this.state.total_icon === 'ASC' ? SortASC : SortDSC)}</th>\n                                            <th>{this.state.prcnt_icon && (this.state.prcnt_icon === 'DSC' ? SortDSC : SortASC)}</th>\n                                        </tr>\n                                    </thead>\n\n                                    <tbody>\n                                        {\n                                            this.state.marks.map(x => (\n                                                <tr key={x.roll_no}>\n                                                    <td>{x.roll_no}</td>\n                                                    <td>{x.name}</td>\n                                                    <td>{x.maths.toFixed(1)}</td>\n                                                    <td>{x.physics.toFixed(1)}</td>\n                                                    <td>{x.chemistry.toFixed(1)}</td>\n                                                    <td>{x.total.toFixed(1)}</td>\n                                                    <td>{x.percentage.toFixed(2)}</td>\n                                                </tr>\n                                            ))\n                                        }\n                                    </tbody>\n\n                                </table>\n                            )\n                    }\n                </section>\n\n                <Link to=\"/\">Back to Homepage</Link>\n\n                <div className=\"error\">\n                    {this.state.error && String(this.state.error)}\n                </div>\n            </div >\n        )\n    }\n}\n\n","import { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport Homepage from './components/homepage'\nimport MarksInput from './components/marksinput'\nimport LeaderBoard from './components/leaderboard'\n\nfunction App() {\n\treturn (\n\t\t<Router>\n\t\t\t<Switch>\n\t\t\t\t<Route exact path='/' component={Homepage} />\n\t\t\t\t<Route path='/marksinput' component={MarksInput} />\n\t\t\t\t<Route path='/leaderboard' component={LeaderBoard} />\n\t\t\t</Switch>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}